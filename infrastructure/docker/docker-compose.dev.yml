
services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - realtime_task_management_challenge

  redis:
    image: redis:${REDIS_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - realtime_task_management_challenge

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_PORT}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "${KAFKA_PORT}:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - realtime_task_management_challenge

  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - realtime_task_management_challenge

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTICSEARCH_PASSWORD} http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - realtime_task_management_challenge

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - realtime_task_management_challenge

  api:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME}_api_dev
    ports:
      - "${API_HTTP_PORT}:5133"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      Redis__ConnectionString: "redis:6379"
      Kafka__BootstrapServers: "kafka:9092"
      RabbitMQ__HostName: "rabbitmq"
      RabbitMQ__UserName: ${RABBITMQ_USER}
      RabbitMQ__Password: ${RABBITMQ_PASSWORD}
      DOTNET_USE_POLLING_FILE_WATCHER: "true"
    volumes:
      # Mount source code for hot reload
      - ../../backend/src:/src/src:cached
      # Mount user secrets if they exist
      - ~/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro
      # Mount HTTPS dev certificates
      - ~/.aspnet/https:/root/.aspnet/https:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - realtime_task_management_challenge

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME}_frontend_dev
    ports:
      - "${FRONTEND_PORT}:3001"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:${API_HTTP_PORT}
    volumes:
      # Mount source code for hot reload
      - ../../frontend/src:/app/src:cached
      - ../../frontend/public:/app/public:cached
      - ../../frontend/index.html:/app/index.html:cached
      - ../../frontend/vite.config.ts:/app/vite.config.ts:cached
      - ../../frontend/tsconfig.json:/app/tsconfig.json:cached
      - ../../frontend/tsconfig.node.json:/app/tsconfig.node.json:cached
      # Use named volume for node_modules to avoid conflicts
      - frontend_node_modules:/app/node_modules
    depends_on:
      - api
    networks:
      - realtime_task_management_challenge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  grafana_data:
  frontend_node_modules:

networks:
  realtime_task_management_challenge:
    name: realtime_task_management_challenge
    driver: bridge